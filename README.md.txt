# Image Generation and Flux Neural Network Demonstration

This repository contains code for generating synthetic images using Stable Diffusion and preprocessing them, along with a demonstration of convolutional neural network models using Flux in Julia. The project is split into two parts:

- **Python Scripts/Notebooks:**

  - Generate synthetic images with Stable Diffusion (via the [diffusers](https://github.com/huggingface/diffusers) library).
  - Preprocess images using `PIL` and `torchvision`, with additional features such as augmentation and watermarking.

- **Julia (Flux) Scripts:**

  - Load and preprocess a saved image.
  - Define and test a minimal neural network model.
  - Develop an improved convolutional model with batch normalization, dropout, and visualize intermediate feature maps.

## Getting Started

### Environment Setup

#### Python

1. **Google Colab (Recommended):**

   - Open the provided Jupyter notebook `python/image_generation_preprocessing.ipynb` in [Google Colab](https://colab.research.google.com/).
   - The notebook installs the necessary libraries using pip:
     ```bash
     !pip install diffusers transformers accelerate pillow torchvision matplotlib tqdm
     ```
   - Run the cells sequentially to generate synthetic images and perform preprocessing.
   - **Note:** The notebook has been stripped and optimized for Colab execution.

2. **Local Setup:**

   - Create a virtual environment (using `venv` or `conda`).
   - Install dependencies from `requirements.txt` (if provided) or manually install:
     ```bash
     pip install diffusers transformers accelerate pillow torchvision matplotlib tqdm
     ```
   - Run the Python script or Jupyter Notebook.

#### Julia (Flux)

1. **Installation:**
   - Ensure you have [Julia](https://julialang.org/downloads/) (version 1.6 or higher) installed.
2. **Package Setup:**
   - Open Julia’s REPL and add the required packages:
     ```julia
     using Pkg
     Pkg.add(["Flux", "Images", "FileIO", "ImageView"])
     ```
3. **Running the Flux Code:**
   - Navigate to the root project directory.
   - Execute the following command to run the Flux script:
     ```julia
     julia Flux_finetune_forward_pass.jl
     ```
   - The script performs the following:
     - Loads a preprocessed image.
     - Defines a minimal and an improved convolutional model.
     - Performs forward passes.
     - Saves feature map images (`feature_map_1.png`, `feature_map_2.png`, etc.).
     - Generates a model summary file (`model_summary.txt`).

## Approach

### Python Code

- **Image Generation:**\
  Uses the Stable Diffusion model (`runwayml/stable-diffusion-v1-5`) to generate images based on a text prompt.\
  *Key features:*
  - Reproducibility with seed setting.
  - Optional watermarking.
  - GPU/CPU selection with logging and progress bars.
- **Image Preprocessing:**\
  Resizes, optionally converts to grayscale, and applies augmentation (random horizontal flip) before converting images to tensors and saving them.\
  *Key features:*
  - Use of `torchvision.transforms` for efficient preprocessing.
  - Visualization with `matplotlib`.

### Julia Code (Flux)

- **Image Loading and Preprocessing:**\
  Loads a preprocessed image (assumed to be 224×224 RGB), normalizes pixel values, and reshapes the image tensor for Flux.

- **Model Definitions:**

  - **Minimal Model:** A simple convolutional network with one convolutional layer, pooling, flattening, and a dense layer.
  - **Improved Model:** A deeper network with multiple convolutional blocks (each with batch normalization and pooling), dense layers, dropout regularization, and a softmax layer.

- **Visualization:**\
  Extracts and saves the feature maps from the first convolutional layer for insight into the learned representations.

## Generated Outputs

- **Images:**
  - Synthetic images are saved in the `generated_images/` directory.
  - Preprocessed images are saved in the `preprocessed_images/` directory.
  - Feature maps from the first convolutional layer are saved as `feature_map_1.png`, `feature_map_2.png`, etc.

### Example Generated Image:



### Example Preprocessed Image:



- **Model Summary:**\
  The improved model architecture is saved to `model_summary.txt` (generated by the Julia script).

## Acknowledgments

- [Hugging Face Diffusers](https://github.com/huggingface/diffusers)
- [Flux.jl](https://fluxml.ai/Flux.jl/stable/)
- Image processing libraries: `PIL`, `torchvision`, `Images.jl`

